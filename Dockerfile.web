# ---------- deps: install node modules ----------
FROM node:20-alpine AS deps
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
# Needed for building native deps like sharp
RUN apk add --no-cache libc6-compat python3 make g++
COPY web/package.json web/package-lock.json ./
# Use npm ci with increased memory and timeout for Railway
RUN npm ci --maxsockets 1 --prefer-offline

# ---------- build: compile Next.js (standalone) ----------
FROM node:20-alpine AS build
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
# Increase Node.js memory limit for Railway builds
ENV NODE_OPTIONS="--max-old-space-size=2048"
# Public build args (baked into the bundle)
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY

# Set environment variables with fallback defaults for Railway deployment reliability
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://mdv-api-production.up.railway.app}
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://mdv-web-production.up.railway.app}
ENV NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY:-}
# Node modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
# App source
COPY web ./
# Copy the docs directory so the prebuild script can find api-contracts.yaml
COPY docs /docs
# Debug: Print all environment variables during build for Railway troubleshooting
RUN echo "=== BUILD ENVIRONMENT DEBUG ===" && \
    echo "NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}" && \
    echo "NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}" && \
    echo "NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY}" && \
    echo "NODE_OPTIONS=${NODE_OPTIONS}" && \
    echo "================================"

# Verify API contracts file exists before build
RUN ls -la /docs/api-contracts.yaml || echo "Warning: API contracts file not found"

# Build with comprehensive error handling and debugging
RUN set -e && \
    echo "Starting Next.js build..." && \
    npm run build 2>&1 | tee build.log || \
    (echo "=== BUILD FAILED - DEBUGGING INFO ===" && \
     echo "Build log:" && cat build.log 2>/dev/null || echo "No build log found" && \
     echo "Next.js trace:" && cat .next/trace 2>/dev/null || echo "No trace found" && \
     echo "Package.json scripts:" && cat package.json | grep -A 10 '"scripts"' && \
     echo "Environment check:" && env | grep NEXT_PUBLIC || echo "No NEXT_PUBLIC vars found" && \
     echo "===================================" && \
     exit 1)

# ---------- runner: minimal production image ----------
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
# Runtime-only vars (e.g., server-side fetches from the web container to backend)
ARG API_URL
ENV API_URL=${API_URL}
# Expose public vars at runtime too (handy for diagnostics or edge cases)
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
ENV NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY}
# Runtime deps for sharp
RUN apk add --no-cache libc6-compat
# Copy Next standalone output
COPY --from=build /app/.next/standalone ./
COPY --from=build /app/.next/static ./.next/static
COPY --from=build /app/public ./public
# Keep package.json around (some setups expect it at runtime)
COPY web/package.json ./package.json
ENV PORT=3000
EXPOSE 3000
# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs
CMD ["node", "server.js"]