# ---------- deps: install node modules ----------
FROM node:20-alpine AS deps
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
# Needed for building native deps like sharp
RUN apk add --no-cache libc6-compat python3 make g++
COPY web/package.json web/package-lock.json ./
# Use npm ci with increased memory and timeout for Railway
RUN npm ci --maxsockets 1 --prefer-offline

# ---------- build: compile Next.js (standalone) ----------
FROM node:20-alpine AS build
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1
# Increase Node.js memory limit for Railway builds
ENV NODE_OPTIONS="--max-old-space-size=2048"
# Public build args (baked into the bundle)
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY

# DEPLOYMENT RELIABILITY FIX: Robust environment variable handling
# Set environment variables with comprehensive fallback strategy for Railway
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://mdv-api-production.up.railway.app}
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://mdv-web-production.up.railway.app}
ENV NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY:-}

# Additional Railway-specific environment variables for build context
ENV RAILWAY_ENVIRONMENT=${RAILWAY_ENVIRONMENT:-production}
ENV NODE_ENV=${NODE_ENV:-production}
# Node modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
# App source
COPY web ./
# Copy the docs directory so the prebuild script can find api-contracts.yaml
COPY docs /docs
# === COMPREHENSIVE BUILD ENVIRONMENT VALIDATION ===
RUN echo "=== RAILWAY BUILD ENVIRONMENT VALIDATION ===" && \
    echo "Timestamp: $(date)" && \
    echo "Build Stage: Next.js Compilation" && \
    echo "Working Directory: $(pwd)" && \
    echo "User: $(whoami)" && \
    echo "Node Version: $(node --version)" && \
    echo "NPM Version: $(npm --version)" && \
    echo "Available Memory: $(free -h 2>/dev/null | head -2 || echo 'Memory info not available')" && \
    echo "Available Disk: $(df -h . | tail -1)" && \
    echo "" && \
    echo "=== ENVIRONMENT VARIABLES VALIDATION ===" && \
    echo "NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}" && \
    echo "NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}" && \
    echo "NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY: ${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY}" && \
    echo "NODE_OPTIONS: ${NODE_OPTIONS}" && \
    echo "NODE_ENV: ${NODE_ENV}" && \
    echo "RAILWAY_ENVIRONMENT: ${RAILWAY_ENVIRONMENT:-'not set'}" && \
    echo "" && \
    echo "=== CRITICAL VALIDATION CHECKS ===" && \
    ([ -n "$NEXT_PUBLIC_API_URL" ] && echo "✅ NEXT_PUBLIC_API_URL is set" || echo "❌ NEXT_PUBLIC_API_URL is missing") && \
    ([ -n "$NEXT_PUBLIC_APP_URL" ] && echo "✅ NEXT_PUBLIC_APP_URL is set" || echo "❌ NEXT_PUBLIC_APP_URL is missing") && \
    echo "================================================"

# Verify critical files and dependencies
RUN echo "=== PRE-BUILD VALIDATION ===" && \
    echo "Checking critical files..." && \
    ls -la /docs/api-contracts.yaml && echo "✅ API contracts found" || (echo "❌ API contracts missing" && exit 1) && \
    ls -la package.json && echo "✅ package.json found" || (echo "❌ package.json missing" && exit 1) && \
    ls -la package-lock.json && echo "✅ package-lock.json found" || (echo "❌ package-lock.json missing" && exit 1) && \
    echo "Checking package.json scripts..." && \
    grep -q '"build"' package.json && echo "✅ build script found" || (echo "❌ build script missing" && exit 1) && \
    grep -q '"types:api"' package.json && echo "✅ types:api script found" || (echo "❌ types:api script missing" && exit 1) && \
    echo "✅ Pre-build validation passed" && \
    echo "==============================="

# Build with comprehensive error handling, logging, and recovery
RUN set -e && \
    echo "=== STARTING NEXT.JS BUILD ===" && \
    echo "Build command: npm run build" && \
    echo "Build timeout: 20 minutes" && \
    echo "Memory limit: 2GB" && \
    echo "===============================" && \
    timeout 1200 npm run build 2>&1 | tee build.log || \
    (echo "=== BUILD FAILED - COMPREHENSIVE DEBUGGING ===" && \
     echo "Exit code: $?" && \
     echo "Timestamp: $(date)" && \
     echo "" && \
     echo "📋 Build Log (last 50 lines):" && \
     tail -50 build.log 2>/dev/null || echo "No build log available" && \
     echo "" && \
     echo "📋 Next.js Build Trace:" && \
     cat .next/trace 2>/dev/null || echo "No Next.js trace available" && \
     echo "" && \
     echo "📋 Package.json Scripts:" && \
     cat package.json | grep -A 15 '"scripts"' 2>/dev/null || echo "Cannot read package.json scripts" && \
     echo "" && \
     echo "📋 Environment Variables:" && \
     env | grep -E "(NEXT_PUBLIC|NODE|RAILWAY)" | sort || echo "No environment variables found" && \
     echo "" && \
     echo "📋 File System State:" && \
     ls -la . && \
     echo "" && \
     echo "📋 Node Modules State:" && \
     ls -la node_modules 2>/dev/null | head -10 || echo "No node_modules directory" && \
     echo "" && \
     echo "📋 Memory Usage:" && \
     free -h 2>/dev/null || echo "Memory info not available" && \
     echo "" && \
     echo "📋 Disk Usage:" && \
     df -h . 2>/dev/null || echo "Disk info not available" && \
     echo "================================================" && \
     exit 1) && \
    echo "✅ Next.js build completed successfully" && \
    echo "Build output size: $(du -sh .next 2>/dev/null || echo 'Unknown')" && \
    echo "=================================="

# ---------- runner: minimal production image ----------
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
# Runtime-only vars (e.g., server-side fetches from the web container to backend)
ARG API_URL
ENV API_URL=${API_URL}
# Expose public vars at runtime too (handy for diagnostics or edge cases)
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
ENV NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY=${NEXT_PUBLIC_PAYSTACK_PUBLIC_KEY}
# Runtime deps for sharp
RUN apk add --no-cache libc6-compat
# Copy Next standalone output
COPY --from=build /app/.next/standalone ./
COPY --from=build /app/.next/static ./.next/static
COPY --from=build /app/public ./public
# Keep package.json around (some setups expect it at runtime)
COPY web/package.json ./package.json
ENV PORT=3000
EXPOSE 3000
# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs
CMD ["node", "server.js"]