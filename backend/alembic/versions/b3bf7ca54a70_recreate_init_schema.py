"""recreate init schema

Revision ID: b3bf7ca54a70
Revises: None
Create Date: 2025-08-23 10:34:04.869743
"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql as pg


# revision identifiers, used by Alembic.
revision = 'b3bf7ca54a70'
down_revision = None
branch_labels = None
depends_on = None

# Define enums with create_type=False to prevent auto-creation during table DDL
role_enum = pg.ENUM('admin', 'supervisor', 'operations', 'logistics', name='role', create_type=False)
order_status_enum = pg.ENUM('PendingPayment', 'Paid', 'Cancelled', 'Refunded', name='order_status', create_type=False)
fulfillment_status_enum = pg.ENUM('Processing', 'ReadyToShip', name='fulfillment_status', create_type=False)
reservation_status_enum = pg.ENUM('Active', 'Released', 'Consumed', 'Expired', name='reservation_status', create_type=False)
shipment_status_enum = pg.ENUM('Dispatched', 'InTransit', 'Delivered', 'Returned', name='shipment_status', create_type=False)

def upgrade() -> None:
    # Pre-create enum types if they do not already exist
    bind = op.get_bind()
    for enum_type in (
        role_enum,
        order_status_enum,
        fulfillment_status_enum,
        reservation_status_enum,
        shipment_status_enum,
    ):
        enum_type.create(bind, checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('carts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_carts'))
    )
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('slug', sa.String(length=160), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_categories'))
    )
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=True)
    op.create_table('coupons',
    sa.Column('code', sa.String(length=40), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('value', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('conditions', sa.JSON(), nullable=True),
    sa.Column('usage_limit', sa.Integer(), nullable=True),
    sa.Column('used_count', sa.Integer(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('valid_from', sa.DateTime(timezone=True), nullable=False),
    sa.Column('valid_until', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('code', name=op.f('pk_coupons'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('role', role_enum, nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('coupons')
    op.drop_index(op.f('ix_categories_slug'), table_name='categories')
    op.drop_table('categories')
    op.drop_table('carts')
    # ### end Alembic commands ###
    
    # Drop enum types
    bind = op.get_bind()
    for enum_type in (
        shipment_status_enum,
        reservation_status_enum,
        fulfillment_status_enum,
        order_status_enum,
        role_enum,
    ):
        enum_type.drop(bind, checkfirst=True)
