name: MDV Deployment Monitor

on:
  push:
    branches: [ main ]
    paths:
      - 'web/**'
      - 'Dockerfile.web'
      - 'railway.json'
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to monitor'
        required: true
        default: 'mdv-web'
        type: choice
        options:
          - mdv-web
          - mdv-api
          - mdv-worker
      force_redeploy:
        description: 'Force redeploy if deployment fails'
        required: false
        default: true
        type: boolean

jobs:
  pre-deployment-check:
    name: Pre-deployment Health Check
    runs-on: ubuntu-latest
    outputs:
      should-monitor: ${{ steps.check.outputs.should-monitor }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd web
          npm ci
      
      - name: Run build health check
        id: check
        run: |
          chmod +x scripts/deployment/check-build-health.sh
          if scripts/deployment/check-build-health.sh; then
            echo "should-monitor=true" >> $GITHUB_OUTPUT
            echo "✅ Pre-deployment checks passed"
          else
            echo "should-monitor=false" >> $GITHUB_OUTPUT
            echo "❌ Pre-deployment checks failed"
            exit 1
          fi
      
      - name: Validate API contracts
        run: |
          if [ ! -f "docs/api-contracts.yaml" ]; then
            echo "❌ API contracts file missing"
            exit 1
          fi
          echo "✅ API contracts file exists"
      
      - name: Test build locally
        run: |
          cd web
          export NEXT_PUBLIC_API_URL="https://mdv-api-production.up.railway.app"
          export NEXT_PUBLIC_APP_URL="https://mdv-web-production.up.railway.app"
          npm run build
          echo "✅ Local build successful"

  monitor-deployment:
    name: Monitor Railway Deployment
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    if: needs.pre-deployment-check.outputs.should-monitor == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
      
      - name: Setup Railway authentication
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
      
      - name: Wait for automatic deployment
        run: |
          echo "⏳ Waiting 60 seconds for Railway to detect changes..."
          sleep 60
      
      - name: Monitor mdv-web deployment
        run: |
          chmod +x scripts/deployment/monitor-deployment.sh
          scripts/deployment/monitor-deployment.sh mdv-web
      
      - name: Verify deployment health
        run: |
          echo "🔍 Verifying deployment health..."
          
          # Check web service health
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://mdv-web-production.up.railway.app/api/health" --max-time 30)
          if [ "$response" = "200" ]; then
            echo "✅ Web service health check passed"
          else
            echo "❌ Web service health check failed (HTTP $response)"
            exit 1
          fi
          
          # Check backend connectivity
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://mdv-web-production.up.railway.app/api/monitoring" --max-time 30)
          if [ "$response" = "200" ]; then
            echo "✅ Backend connectivity check passed"
          else
            echo "❌ Backend connectivity check failed (HTTP $response)"
            exit 1
          fi
      
      - name: Test critical user flows
        run: |
          echo "🧪 Testing critical user flows..."
          
          # Test homepage
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://mdv-web-production.up.railway.app/" --max-time 30)
          if [ "$response" = "200" ]; then
            echo "✅ Homepage accessible"
          else
            echo "❌ Homepage not accessible (HTTP $response)"
            exit 1
          fi
          
          # Test staff login page
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://mdv-web-production.up.railway.app/staff-login" --max-time 30)
          if [ "$response" = "200" ]; then
            echo "✅ Staff login page accessible"
          else
            echo "❌ Staff login page not accessible (HTTP $response)"
            exit 1
          fi
      
      - name: Deployment success notification
        if: success()
        run: |
          echo "🎉 MDV Web deployment successful!"
          echo "✅ All health checks passed"
          echo "✅ Critical user flows verified"
          echo "🚀 Deployment ready for production traffic"
      
      - name: Deployment failure notification
        if: failure()
        run: |
          echo "🚨 MDV Web deployment failed!"
          echo "❌ Health checks or user flow tests failed"
          echo "🔧 Manual intervention may be required"
          
          # Get recent logs for debugging
          railway logs --service mdv-web | tail -50
          
          exit 1

  post-deployment-tests:
    name: Post-deployment Integration Tests
    runs-on: ubuntu-latest
    needs: monitor-deployment
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Run integration tests
        run: |
          echo "🧪 Running post-deployment integration tests..."
          
          # Test API proxy functionality
          response=$(curl -s "https://mdv-web-production.up.railway.app/api/products/category/men?page_size=5")
          if echo "$response" | jq -e '.products' > /dev/null 2>&1; then
            echo "✅ API proxy working correctly"
          else
            echo "❌ API proxy test failed"
            echo "Response: $response"
            exit 1
          fi
          
          # Test authentication endpoints
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://mdv-web-production.up.railway.app/api/auth/check" --max-time 10)
          if [ "$response" = "401" ] || [ "$response" = "200" ]; then
            echo "✅ Authentication endpoints responding correctly"
          else
            echo "❌ Authentication endpoint test failed (HTTP $response)"
            exit 1
          fi
      
      - name: Performance baseline check
        run: |
          echo "⚡ Checking performance baseline..."
          
          # Measure response time for homepage
          start_time=$(date +%s%N)
          curl -s "https://mdv-web-production.up.railway.app/" > /dev/null
          end_time=$(date +%s%N)
          response_time=$(( (end_time - start_time) / 1000000 ))
          
          echo "Homepage response time: ${response_time}ms"
          
          if [ $response_time -lt 3000 ]; then
            echo "✅ Performance within acceptable range"
          else
            echo "⚠️ Performance slower than expected (${response_time}ms > 3000ms)"
          fi
      
      - name: Final deployment report
        run: |
          echo "📊 Deployment Report"
          echo "==================="
          echo "✅ Pre-deployment checks: Passed"
          echo "✅ Railway deployment: Successful"
          echo "✅ Health monitoring: Passed"
          echo "✅ Integration tests: Passed"
          echo "✅ Performance check: Completed"
          echo ""
          echo "🎉 MDV Web deployment fully verified and ready for production!"
