/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Health check */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["HealthResponse"];
          };
        };
      };
    };
  };
  "/api/products": {
    /** List products */
    get: {
      parameters: {
        query?: {
          q?: string;
          page?: number;
          page_size?: number;
          sort?: "relevance" | "newest" | "price_asc" | "price_desc";
        };
      };
      responses: {
        /** @description Products */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedProducts"];
          };
        };
      };
    };
  };
  "/api/products/{idOrSlug}": {
    /** Get product */
    get: {
      parameters: {
        path: {
          idOrSlug: string;
        };
      };
      responses: {
        /** @description Product */
        200: {
          content: {
            "application/json": components["schemas"]["Product"];
          };
        };
        /** @description Not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/cart": {
    /** Create cart */
    post: {
      responses: {
        /** @description Created */
        200: {
          content: {
            "application/json": components["schemas"]["CartCreateResponse"];
          };
        };
      };
    };
  };
  "/api/cart/{cart_id}": {
    /** Get cart */
    get: {
      parameters: {
        path: {
          cart_id: number;
        };
      };
      responses: {
        /** @description Cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
        /** @description Not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/cart/{cart_id}/items": {
    /** Add item to cart */
    post: {
      parameters: {
        path: {
          cart_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CartItemIn"];
        };
      };
      responses: {
        /** @description Updated cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
  };
  "/api/cart/{cart_id}/items/{item_id}": {
    /** Update item quantity */
    put: {
      parameters: {
        path: {
          cart_id: number;
          item_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CartItemQtyUpdate"];
        };
      };
      responses: {
        /** @description Updated cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
    /** Remove item from cart */
    delete: {
      parameters: {
        path: {
          cart_id: number;
          item_id: number;
        };
      };
      responses: {
        /** @description Updated cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
  };
  "/api/cart/{cart_id}/clear": {
    /** Clear cart */
    post: {
      parameters: {
        path: {
          cart_id: number;
        };
      };
      responses: {
        /** @description Emptied cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
  };
  "/api/shipping/calculate": {
    /** Shipping preview */
    get: {
      parameters: {
        query: {
          state: string;
          subtotal?: number;
          coupon_code?: string;
        };
      };
      responses: {
        /** @description Estimate */
        200: {
          content: {
            "application/json": components["schemas"]["ShippingEstimate"];
          };
        };
      };
    };
  };
  "/api/checkout/init": {
    /** Initialize checkout */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CheckoutInitRequest"];
        };
      };
      responses: {
        /** @description Authorization URL */
        200: {
          content: {
            "application/json": components["schemas"]["CheckoutInitResponse"];
          };
        };
      };
    };
  };
  "/api/orders/{order_id}/tracking": {
    /** Get order tracking status */
    get: {
      parameters: {
        path: {
          order_id: number;
        };
      };
      responses: {
        /** @description Tracking */
        200: {
          content: {
            "application/json": components["schemas"]["OrderTrackingResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/paystack/webhook": {
    /** Paystack webhook */
    post: {
      parameters: {
        header: {
          "x-paystack-signature": string;
        };
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/paystack/mock": {
    /** Local mock to simulate Paystack events */
    post: {
      requestBody: {
        content: {
          "application/json": {
            event?: string;
            data?: {
              reference?: string;
            };
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/paystack/verify": {
    /** Verify payment by reference */
    get: {
      parameters: {
        query: {
          reference: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/auth/login": {
    /** Staff login (MVP) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthLoginRequest"];
        };
      };
      responses: {
        /** @description Token */
        200: {
          content: {
            "application/json": components["schemas"]["AuthLoginResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HealthResponse: {
      status?: string;
      service?: string;
      version?: string;
    };
    PaginatedProducts: {
      items?: components["schemas"]["Product"][];
      total?: number;
      page?: number;
      page_size?: number;
    };
    Variant: {
      id?: number;
      sku?: string;
      size?: string | null;
      color?: string | null;
      price?: number;
    };
    Product: {
      id?: number;
      title?: string;
      slug?: string;
      description?: string | null;
      compare_at_price?: number | null;
      variants?: components["schemas"]["Variant"][];
      images?: components["schemas"]["ProductImage"][];
    };
    CartCreateResponse: {
      id?: number;
    };
    CartItem: {
      id?: number;
      variant_id?: number;
      qty?: number;
      title?: string | null;
      price?: number | null;
      image_url?: string | null;
    };
    CartItemIn: {
      variant_id: number;
      qty: number;
    };
    CartItemQtyUpdate: {
      qty: number;
    };
    Cart: {
      id?: number;
      items?: components["schemas"]["CartItem"][];
    };
    ShippingEstimate: {
      shipping_fee?: number;
      free_shipping_eligible?: boolean;
      reason?: string | null;
    };
    AddressIn: {
      name?: string;
      phone?: string;
      state?: string;
      city?: string;
      street?: string;
    };
    CheckoutInitRequest: {
      cart_id?: number;
      address?: components["schemas"]["AddressIn"];
      /** Format: email */
      email?: string;
      coupon_code?: string | null;
    };
    CheckoutInitResponse: {
      order_id?: number;
      /** Format: uri */
      authorization_url?: string;
      reference?: string;
      totals?: {
        [key: string]: unknown;
      };
    };
    AuthLoginRequest: {
      /** Format: email */
      email?: string;
      password?: string;
    };
    AuthLoginResponse: {
      access_token?: string;
      token?: string;
      token_type?: string;
      role?: string;
    };
    ProductImage: {
      id?: number;
      url?: string;
      alt_text?: string | null;
      width?: number | null;
      height?: number | null;
      sort_order?: number;
      is_primary?: boolean;
    };
    OrderTrackingResponse: {
      order_id?: number;
      status?: string;
      timeline?: ({
          code?: string;
          /** Format: date-time */
          at?: string;
          message?: string | null;
        })[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
