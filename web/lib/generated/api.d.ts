/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Health check */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["HealthResponse"];
          };
        };
      };
    };
  };
  "/api/products": {
    /** List products */
    get: {
      parameters: {
        query?: {
          q?: string;
          page?: number;
          page_size?: number;
          sort?: "relevance" | "newest" | "price_asc" | "price_desc";
        };
      };
      responses: {
        /** @description Products */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedProducts"];
          };
        };
      };
    };
  };
  "/api/products/{idOrSlug}": {
    /** Get product */
    get: {
      parameters: {
        path: {
          idOrSlug: string;
        };
      };
      responses: {
        /** @description Product */
        200: {
          content: {
            "application/json": components["schemas"]["Product"];
          };
        };
        /** @description Not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/cart": {
    /** Create cart */
    post: {
      responses: {
        /** @description Created */
        200: {
          content: {
            "application/json": components["schemas"]["CartCreateResponse"];
          };
        };
      };
    };
  };
  "/api/cart/{cart_id}": {
    /** Get cart */
    get: {
      parameters: {
        path: {
          cart_id: number;
        };
      };
      responses: {
        /** @description Cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
        /** @description Not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/cart/{cart_id}/items": {
    /** Add item to cart */
    post: {
      parameters: {
        path: {
          cart_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CartItemIn"];
        };
      };
      responses: {
        /** @description Updated cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
  };
  "/api/cart/{cart_id}/items/{item_id}": {
    /** Update item quantity */
    put: {
      parameters: {
        path: {
          cart_id: number;
          item_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CartItemQtyUpdate"];
        };
      };
      responses: {
        /** @description Updated cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
    /** Remove item from cart */
    delete: {
      parameters: {
        path: {
          cart_id: number;
          item_id: number;
        };
      };
      responses: {
        /** @description Updated cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
  };
  "/api/cart/{cart_id}/clear": {
    /** Clear cart */
    post: {
      parameters: {
        path: {
          cart_id: number;
        };
      };
      responses: {
        /** @description Emptied cart */
        200: {
          content: {
            "application/json": components["schemas"]["Cart"];
          };
        };
      };
    };
  };
  "/api/shipping/calculate": {
    /** Shipping preview */
    get: {
      parameters: {
        query: {
          state: string;
          subtotal?: number;
          coupon_code?: string;
        };
      };
      responses: {
        /** @description Estimate */
        200: {
          content: {
            "application/json": components["schemas"]["ShippingEstimate"];
          };
        };
      };
    };
  };
  "/api/checkout/init": {
    /** Initialize checkout */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CheckoutInitRequest"];
        };
      };
      responses: {
        /** @description Authorization URL */
        200: {
          content: {
            "application/json": components["schemas"]["CheckoutInitResponse"];
          };
        };
      };
    };
  };
  "/api/orders/{order_id}/tracking": {
    /** Get order tracking status */
    get: {
      parameters: {
        path: {
          order_id: number;
        };
      };
      responses: {
        /** @description Tracking */
        200: {
          content: {
            "application/json": components["schemas"]["OrderTrackingResponse"];
          };
        };
        /** @description Not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/paystack/webhook": {
    /** Paystack webhook */
    post: {
      parameters: {
        header: {
          "x-paystack-signature": string;
        };
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/paystack/mock": {
    /** Local mock to simulate Paystack events */
    post: {
      requestBody: {
        content: {
          "application/json": {
            event?: string;
            data?: {
              reference?: string;
            };
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/paystack/verify": {
    /** Verify payment by reference */
    get: {
      parameters: {
        query: {
          reference: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/api/auth/login": {
    /** Staff login (MVP) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthLoginRequest"];
        };
      };
      responses: {
        /** @description Token */
        200: {
          content: {
            "application/json": components["schemas"]["AuthLoginResponse"];
          };
        };
      };
    };
  };
  "/api/admin/reports/categories": {
    /**
     * Admin categories report
     * @description Aggregated category-level inventory and sales metrics.
     */
    get: {
      parameters: {
        query?: {
          /** @description Time window for sales metrics */
          period?: "7d" | "30d" | "90d" | "365d";
        };
      };
      responses: {
        /** @description Categories report */
        200: {
          content: {
            "application/json": components["schemas"]["CategoriesReportResponse"];
          };
        };
      };
    };
  };
  "/api/admin/reports/export/categories": {
    /**
     * Export categories report as CSV
     * @description Returns a JSON string that contains the CSV text for the categories report.
     */
    get: {
      parameters: {
        query?: {
          /** @description Time window for sales metrics */
          period?: "7d" | "30d" | "90d" | "365d";
        };
      };
      responses: {
        /** @description CSV content as JSON string */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/api/admin/logistics/stats": {
    /**
     * Get logistics dashboard statistics
     * @description Returns comprehensive statistics for the logistics dashboard including shipment counts by status and tab-specific counts.
     */
    get: {
      responses: {
        /** @description Logistics statistics */
        200: {
          content: {
            "application/json": components["schemas"]["LogisticsStatsResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/all-orders": {
    /**
     * Get all orders in logistics pipeline
     * @description Returns all paid orders that have fulfillments (in logistics pipeline) with comprehensive status information.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          page_size?: number;
        };
      };
      responses: {
        /** @description Orders in logistics pipeline */
        200: {
          content: {
            "application/json": components["schemas"]["LogisticsOrdersResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/ready-to-ship": {
    /**
     * Get orders ready to ship
     * @description Returns orders that are ready to ship (fulfillment ready but no shipment created).
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          page_size?: number;
        };
      };
      responses: {
        /** @description Orders ready to ship */
        200: {
          content: {
            "application/json": components["schemas"]["LogisticsOrdersResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/in-transit": {
    /**
     * Get orders in transit
     * @description Returns orders that are currently being shipped (dispatched or in_transit status).
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          page_size?: number;
        };
      };
      responses: {
        /** @description Orders in transit */
        200: {
          content: {
            "application/json": components["schemas"]["LogisticsOrdersResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/delivered": {
    /**
     * Get delivered orders
     * @description Returns orders that have been successfully delivered.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          page_size?: number;
        };
      };
      responses: {
        /** @description Delivered orders */
        200: {
          content: {
            "application/json": components["schemas"]["LogisticsOrdersResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/pending-dispatch": {
    /**
     * Get orders pending dispatch
     * @description Returns orders that are ready to ship but awaiting shipment creation.
     */
    get: {
      parameters: {
        query?: {
          page?: number;
          page_size?: number;
        };
      };
      responses: {
        /** @description Orders pending dispatch */
        200: {
          content: {
            "application/json": components["schemas"]["LogisticsOrdersResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/bulk-create-shipments": {
    /**
     * Create shipments for multiple orders in bulk
     * @description Creates shipments for multiple orders simultaneously. Supports up to 100 orders per request.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BulkCreateShipmentsRequest"];
        };
      };
      responses: {
        /** @description Bulk shipment creation results */
        200: {
          content: {
            "application/json": components["schemas"]["BulkActionResponse"];
          };
        };
      };
    };
  };
  "/api/admin/logistics/bulk-update-status": {
    /**
     * Update shipment status for multiple orders in bulk
     * @description Updates shipment status for multiple orders simultaneously. Supports up to 100 orders per request.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BulkUpdateStatusRequest"];
        };
      };
      responses: {
        /** @description Bulk status update results */
        200: {
          content: {
            "application/json": components["schemas"]["BulkActionResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HealthResponse: {
      status?: string;
      service?: string;
      version?: string;
    };
    PaginatedProducts: {
      items?: components["schemas"]["Product"][];
      total?: number;
      page?: number;
      page_size?: number;
    };
    Variant: {
      id?: number;
      sku?: string;
      size?: string | null;
      color?: string | null;
      price?: number;
    };
    Product: {
      id?: number;
      title?: string;
      slug?: string;
      description?: string | null;
      compare_at_price?: number | null;
      variants?: components["schemas"]["Variant"][];
      images?: components["schemas"]["ProductImage"][];
    };
    CartCreateResponse: {
      id?: number;
    };
    CartItem: {
      id?: number;
      variant_id?: number;
      qty?: number;
      title?: string | null;
      price?: number | null;
      image_url?: string | null;
    };
    CartItemIn: {
      variant_id: number;
      qty: number;
    };
    CartItemQtyUpdate: {
      qty: number;
    };
    Cart: {
      id?: number;
      items?: components["schemas"]["CartItem"][];
    };
    ShippingEstimate: {
      shipping_fee?: number;
      free_shipping_eligible?: boolean;
      reason?: string | null;
    };
    AddressIn: {
      name?: string;
      phone?: string;
      state?: string;
      city?: string;
      street?: string;
    };
    CheckoutInitRequest: {
      cart_id?: number;
      address?: components["schemas"]["AddressIn"];
      /** Format: email */
      email?: string;
      coupon_code?: string | null;
    };
    CheckoutInitResponse: {
      order_id?: number;
      /** Format: uri */
      authorization_url?: string;
      reference?: string;
      totals?: {
        [key: string]: unknown;
      };
    };
    AuthLoginRequest: {
      /** Format: email */
      email?: string;
      password?: string;
    };
    AuthLoginResponse: {
      access_token?: string | null;
      token?: string | null;
      token_type?: string;
      role?: string;
      force_password_change?: boolean | null;
      user_id?: number | null;
      message?: string | null;
    };
    ProductImage: {
      id?: number;
      url?: string;
      alt_text?: string | null;
      width?: number | null;
      height?: number | null;
      sort_order?: number;
      is_primary?: boolean;
    };
    OrderTrackingResponse: {
      order_id?: number;
      status?: string;
      timeline?: ({
          code?: string;
          /** Format: date-time */
          at?: string;
          message?: string | null;
        })[];
    };
    CategoriesReportCategory: {
      id?: number;
      name?: string;
      product_count?: number;
      variant_count?: number;
      total_inventory_qty?: number;
      inventory_value?: number;
      low_stock_count?: number;
      sales_revenue?: number;
      orders_count?: number;
    };
    CategoriesReportSummary: {
      product_count?: number;
      variant_count?: number;
      total_inventory_qty?: number;
      inventory_value?: number;
      low_stock_count?: number;
      sales_revenue?: number;
      orders_count?: number;
    };
    CategoriesReportResponse: {
      period?: string;
      total_categories?: number;
      summary?: components["schemas"]["CategoriesReportSummary"];
      categories?: components["schemas"]["CategoriesReportCategory"][];
    };
    LogisticsStatsResponse: {
      total_shipments?: number;
      dispatched?: number;
      in_transit?: number;
      delivered?: number;
      returned?: number;
      pending_dispatch?: number;
      ready_to_ship?: number;
      all_orders?: number;
      in_transit_total?: number;
      tabs?: {
        all_orders?: number;
        ready_to_ship?: number;
        in_transit?: number;
        delivered?: number;
        pending_dispatch?: number;
      };
    };
    LogisticsOrdersResponse: {
      orders?: components["schemas"]["LogisticsOrder"][];
    };
    LogisticsOrder: {
      id?: number;
      order_number?: string;
      customer_name?: string;
      items_count?: number;
      total_amount?: number;
      /** Format: date-time */
      created_at?: string;
      logistics_status?: string;
      fulfillment_status?: string;
      shipment_status?: string;
      tracking_id?: string;
      courier?: string;
      /** Format: date-time */
      dispatched_at?: string;
      /** Format: date-time */
      delivered_at?: string;
      /** Format: date-time */
      packed_at?: string;
      pending_hours?: number;
      fulfillment_notes?: string;
      shipping_address?: {
        city?: string;
        state?: string;
        street?: string;
      };
    };
    BulkCreateShipmentsRequest: {
      /** @description Array of order IDs to create shipments for (max 100) */
      order_ids: number[];
      /**
       * @description Courier service for the shipments
       * @default DHL
       */
      courier?: string;
    };
    BulkUpdateStatusRequest: {
      /** @description Array of order IDs to update (max 100) */
      order_ids: number[];
      /**
       * @description New shipment status
       * @enum {string}
       */
      status: "dispatched" | "in_transit" | "delivered" | "returned";
      /** @description Optional notes for the status update */
      notes?: string;
    };
    BulkActionResponse: {
      message?: string;
      results?: {
        total_processed?: number;
        success?: {
            order_id?: number;
            tracking_id?: string;
            old_status?: string;
            new_status?: string;
          }[];
        failed?: {
            order_id?: number;
            error?: string;
          }[];
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
